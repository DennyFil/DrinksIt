<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
    				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    				http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
         			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
					http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
					http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd">

	<context:property-placeholder location="classpath:server.properties" />

	<context:component-scan base-package="ru.drinksit" />

	<tx:annotation-driven transaction-manager="transactionManager" />

	<mvc:default-servlet-handler/>
	
	<mvc:cors>
		<mvc:mapping path="/**" />
	</mvc:cors>

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- adding view resolver to show jsp's on browser -->
	<!--<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="./jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>-->

	<!-- Configure to plugin JSON as request and response in method handler -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jsonMessageConverter" />
			</list>
		</property>
	</bean>

	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<bean id="jsonMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	</bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>ru.drinksit</value>
			</list>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>ru.drinksit.auxillary.DTO.Bar</value>
				<value>ru.drinksit.auxillary.DTO.Drink</value>
				<value>ru.drinksit.auxillary.DTO.Order</value>
				<value>ru.drinksit.auxillary.DTO.Payment</value>
				<value>ru.drinksit.auxillary.DTO.User</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql:false}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql:false}</prop>
			</props>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="persistenceExceptionTranslationPostProcessor"
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<bean id="databaseManager" class="ru.drinksit.auxillary.database.DatabaseManager">
	</bean>
	
	<bean id="userService" class="ru.drinksit.auxillary.ServiceDTO.UserService">
	</bean>
	
	<bean id="barService" class="ru.drinksit.auxillary.ServiceDTO.BarService">
	</bean>
	
	<bean id="orderService" class="ru.drinksit.auxillary.ServiceDTO.OrderService">
	</bean>
	
	<bean id="drinkService" class="ru.drinksit.auxillary.ServiceDTO.DrinkService">
	</bean>
	
	<bean id="hmacAuthenticationFilter" class="ru.drinksit.auxillary.HmacAuthenticationFilter">
	</bean>

	<!--<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service id="userService">
				<security:user name="${webService.admin}" password="${webService.adminPassword}"
					authorities="ROLE_ADMIN" />
				<security:user name="${webService.user}" password="${webService.userPassword}"
					authorities="ROLE_USER" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>

	<security:http create-session="stateless"
		use-expressions="true">
		<security:intercept-url pattern="/admin/**"
			access="hasAnyRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/user/**"
			access="hasAnyRole('ROLE_USER')" />
		<security:http-basic />
		<security:csrf disabled="true"/>
	</security:http>-->

	<bean id="ordersReport" class="ru.drinksit.views.PdfOrderReportView">
	</bean>

</beans>  